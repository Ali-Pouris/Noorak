[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=13]
script/source = "extends CollisionPolygon2D

onready var parent = get_parent()

export var shard_poly_colors = Color(1,1,1,0.5)
export var is_complex = false

var tween = Tween.new()
var poly_color = Polygon2D.new()
var is_added : bool = false

onready var line_points: Array



# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()
	poly_color.polygon = polygon
	poly_color.color = shard_poly_colors
	poly_color.color.a = 0.7
	add_child(poly_color)
	
	var poly_line = get_polygon()

	for i in range(0 , poly_line.size()):
		#draw_line(poly_line[i-1] , poly_line[i], OutLine , Width)
		line_points.append(poly_line[i])
	line_points.append(poly_line[0])
	line_points.append(poly_line[1])


func _draw():
	draw_polyline(line_points,Color(1,1,1,0.7),1)


func explode():
	var points = polygon
	var delaunay_points_one = Geometry.triangulate_polygon(points)
	
	if not delaunay_points_one:
		print(\"serious error occurred no delaunay points found\")
	#find the midlle point of each triangle and add it to points
	for index in len(delaunay_points_one) / 3:
		var shard_pool_one = PoolVector2Array()
		var Ox = 0
		var Oy = 0
		for n in range(3):
			shard_pool_one.append(points[delaunay_points_one[(index * 3) + n]])
			Ox += shard_pool_one[n].x
			Oy += shard_pool_one[n].y
		points.append(Vector2(Ox / 3, Oy / 3))
	
	var delaunay_points_two = Geometry.triangulate_delaunay_2d(points)
	
	if is_complex:
		delaunay_points_two = delaunay_points_one
	
	for index in len(delaunay_points_two) / 3:
		var shard_pool = PoolVector2Array()
		
		# loop over the three points in our triangle
		for n in range(3):
			shard_pool.append(points[delaunay_points_two[(index * 3) + n]])
		
		var shard_polygon = Polygon2D.new()
		var shard_collision_polygon = CollisionPolygon2D.new()
		var shard_rigidbody = RigidBody2D.new()

		
		shard_polygon.polygon = shard_pool
		shard_collision_polygon.polygon = shard_pool
		shard_rigidbody.applied_torque = round(rand_range(-1,1))
		shard_rigidbody.mass = 0.4
		shard_rigidbody.gravity_scale = 0.2
		shard_rigidbody.set_collision_layer_bit(0,false)
		shard_rigidbody.set_collision_mask_bit(0,false)
		shard_rigidbody.set_collision_layer_bit(2,true)
		shard_rigidbody.set_collision_mask_bit(2,true)
		shard_rigidbody.add_child(shard_polygon)
		shard_rigidbody.add_child(shard_collision_polygon)
		
		shard_polygon.color = shard_poly_colors
		
#		add_child(shard_rigidbody)
#		shard_polygon.add_child(tween)
		call_deferred(\"add_child\", shard_rigidbody)
		if is_added == false:
			call_deferred(\"add_child\", tween)
			is_added = true
		
		tween.interpolate_property(self, \"modulate\", Color(1,1,1,1), Color(1,1,1,0), 0.5, tween.TRANS_LINEAR, tween.EASE_OUT_IN)
		shard_rigidbody.apply_central_impulse(Vector2(5,0).rotated(deg2rad(rand_range(0,360))))
	
	yield(get_tree().create_timer(1), \"timeout\")
	tween.start()
	yield(get_tree().create_timer(0.5), \"timeout\")
	for ch in get_children():
		ch.queue_free()

func destroy_the_glass():
	for n in range(20):
		parent.set_collision_layer_bit(n, false)
		parent.set_collision_mask_bit(n, false)
	poly_color.hide()
	
	#Deleting the pinjoint conected to the glass before deleting the glass itself
	var twodots = \"../\"
	for child in get_parent().get_parent().get_children():
		if child.is_in_group(\"GlassPinJoint\"):
			if child.get_node_a() == twodots + get_parent().name or child.get_node_b() == twodots + get_parent().name:
				child.queue_free()
	
	explode()
	yield(get_tree().create_timer(5), \"timeout\")
	parent.queue_free()


func _on_RigidBody2D2_body_entered(body):
#	print(body.get_collision_layer_bit(9))
#	print(body.get_linear_velocity().length())
#	print(body.name)
	if parent.get_linear_velocity().length() > 40:
		destroy_the_glass()
	elif body.get_collision_layer_bit(9) == true && body.get_collision_mask_bit(9) == true:
		destroy_the_glass()
	elif body.get_collision_layer_bit(9) == true && body.get_linear_velocity().length() > 80:
		destroy_the_glass()
	elif body.get_collision_mask_bit(9) == true:
		destroy_the_glass()
"

[sub_resource type="GDScript" id=14]
script/source = "extends CollisionPolygon2D

onready var parent = get_parent()

export var shard_poly_colors = Color(1,1,1,0.5)
export var is_complex = false

var tween = Tween.new()
var poly_color = Polygon2D.new()
var is_added : bool = false

onready var line_points: Array



# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()
	poly_color.polygon = polygon
	poly_color.color = shard_poly_colors
	poly_color.color.a = 0.7
	add_child(poly_color)
	
	var poly_line = get_polygon()

	for i in range(0 , poly_line.size()):
		#draw_line(poly_line[i-1] , poly_line[i], OutLine , Width)
		line_points.append(poly_line[i])
	line_points.append(poly_line[0])
	line_points.append(poly_line[1])


func _draw():
	draw_polyline(line_points,Color(1,1,1,0.7),1)


func explode():
	var points = polygon
	var delaunay_points_one = Geometry.triangulate_polygon(points)
	
	if not delaunay_points_one:
		print(\"serious error occurred no delaunay points found\")
	#find the midlle point of each triangle and add it to points
	for index in len(delaunay_points_one) / 3:
		var shard_pool_one = PoolVector2Array()
		var Ox = 0
		var Oy = 0
		for n in range(3):
			shard_pool_one.append(points[delaunay_points_one[(index * 3) + n]])
			Ox += shard_pool_one[n].x
			Oy += shard_pool_one[n].y
		points.append(Vector2(Ox / 3, Oy / 3))
	
	var delaunay_points_two = Geometry.triangulate_delaunay_2d(points)
	
	if is_complex:
		delaunay_points_two = delaunay_points_one
	
	for index in len(delaunay_points_two) / 3:
		var shard_pool = PoolVector2Array()
		
		# loop over the three points in our triangle
		for n in range(3):
			shard_pool.append(points[delaunay_points_two[(index * 3) + n]])
		
		var shard_polygon = Polygon2D.new()
		var shard_collision_polygon = CollisionPolygon2D.new()
		var shard_rigidbody = RigidBody2D.new()

		
		shard_polygon.polygon = shard_pool
		shard_collision_polygon.polygon = shard_pool
		shard_rigidbody.applied_torque = round(rand_range(-1,1))
		shard_rigidbody.mass = 0.4
		shard_rigidbody.gravity_scale = 0.2
		shard_rigidbody.set_collision_layer_bit(0,false)
		shard_rigidbody.set_collision_mask_bit(0,false)
		shard_rigidbody.set_collision_layer_bit(2,true)
		shard_rigidbody.set_collision_mask_bit(2,true)
		shard_rigidbody.add_child(shard_polygon)
		shard_rigidbody.add_child(shard_collision_polygon)
		
		shard_polygon.color = shard_poly_colors
		
#		add_child(shard_rigidbody)
#		shard_polygon.add_child(tween)
		call_deferred(\"add_child\", shard_rigidbody)
		if is_added == false:
			call_deferred(\"add_child\", tween)
			is_added = true
		
		tween.interpolate_property(self, \"modulate\", Color(1,1,1,1), Color(1,1,1,0), 0.5, tween.TRANS_LINEAR, tween.EASE_OUT_IN)
		shard_rigidbody.apply_central_impulse(Vector2(5,0).rotated(deg2rad(rand_range(0,360))))
	
	yield(get_tree().create_timer(1), \"timeout\")
	tween.start()
	yield(get_tree().create_timer(0.5), \"timeout\")
	for ch in get_children():
		ch.queue_free()

func destroy_the_glass():
	for n in range(20):
		parent.set_collision_layer_bit(n, false)
		parent.set_collision_mask_bit(n, false)
	poly_color.hide()
	
	#Deleting the pinjoint conected to the glass before deleting the glass itself
	var twodots = \"../\"
	for child in get_parent().get_parent().get_children():
		if child.is_in_group(\"GlassPinJoint\"):
			if child.get_node_a() == twodots + get_parent().name or child.get_node_b() == twodots + get_parent().name:
				child.queue_free()
	
	explode()
	yield(get_tree().create_timer(5), \"timeout\")
	parent.queue_free()


func _on_RigidBody2D2_body_entered(body):
#	print(body.get_collision_layer_bit(9))
#	print(body.get_linear_velocity().length())
#	print(body.name)
	if parent.get_linear_velocity().length() > 40:
		destroy_the_glass()
	elif body.get_collision_layer_bit(9) == true && body.get_collision_mask_bit(9) == true:
		destroy_the_glass()
	elif body.get_collision_layer_bit(9) == true && body.get_linear_velocity().length() > 80:
		destroy_the_glass()
	elif body.get_collision_mask_bit(9) == true:
		destroy_the_glass()
"

[node name="static" type="Node2D"]

[node name="Glass1" type="RigidBody2D" parent="."]
position = Vector2( 626.204, -320 )
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass1"]
polygon = PoolVector2Array( 3.99994, -60, 3.99997, -40.3946, 4, -20, 4, 12, 3.99996, 32.4444, 3.99994, 56, -4.00006, 56, -4.00003, 31.8498, -4, 12, -4, -20, -4.00003, -41.8811, -4.00006, -60 )
script = SubResource( 13 )

[node name="Glass2" type="RigidBody2D" parent="."]
position = Vector2( 758.502, -329.378 )
rotation = 0.930332
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass2"]
polygon = PoolVector2Array( -3.99994, -18.3168, 4.00006, -17.9243, 4.00006, -4.88147, 4.00006, 10.8086, 4.00006, 21.6375, -3.99994, 21.2363, -3.99993, 5.41431, -3.99993, -10.9251 )
script = SubResource( 14 )

[node name="Glass3" type="RigidBody2D" parent="."]
position = Vector2( 798.299, -415.015 )
rotation = 0.0947351
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass3"]
polygon = PoolVector2Array( -3.99994, -20.2731, 4.00006, -20.2362, 4.00006, -3.97937, 4.00006, 7.78839, 4.00006, 19.3312, -3.99994, 19.8508, -3.99993, 4.1015, -3.99993, -10.9251 )
script = SubResource( 14 )

[node name="Glass4" type="RigidBody2D" parent="."]
position = Vector2( 952.448, -362.689 )
rotation = 0.492545
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass4"]
polygon = PoolVector2Array( -3.99994, -21.7861, 4.00006, -20.2499, 4.00006, -5.12201, 4.00006, 6.58276, 4.00006, 20.3308, -3.99994, 18.1606, -3.99993, 6.47675, -3.99993, -5.94043 )
script = SubResource( 14 )

[node name="Glass5" type="RigidBody2D" parent="."]
position = Vector2( 1027.67, -370.105 )
rotation = -0.799372
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass5"]
polygon = PoolVector2Array( -3.99994, -16.8153, 4.00006, -17.1571, 4.00006, -0.688232, 4.00006, 10.2186, -3.99994, 13.896, -3.99993, -6.03787 )
script = SubResource( 14 )

[node name="Glass6" type="RigidBody2D" parent="."]
position = Vector2( 1063.5, -285.989 )
rotation = -0.214218
z_index = -1
collision_layer = 2148008448
collision_mask = 524800
mode = 3
contacts_reported = 1
contact_monitor = true
__meta__ = {
"_edit_horizontal_guides_": [ 7.91946, -8.18734 ],
"_edit_vertical_guides_": [ -64.117, 63.9883, -64.117 ]
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Glass6"]
polygon = PoolVector2Array( -3.99994, -22.4733, 4.00006, -20.4233, 4.00006, -4.5486, 4.00006, 10.8086, 4.00006, 23.7768, -3.99994, 22.2189, -3.99993, 7.77792, -3.99993, -10.9251 )
script = SubResource( 14 )
[connection signal="body_entered" from="Glass1" to="Glass1/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
[connection signal="body_entered" from="Glass2" to="Glass2/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
[connection signal="body_entered" from="Glass3" to="Glass3/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
[connection signal="body_entered" from="Glass4" to="Glass4/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
[connection signal="body_entered" from="Glass5" to="Glass5/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
[connection signal="body_entered" from="Glass6" to="Glass6/CollisionPolygon2D" method="_on_RigidBody2D2_body_entered"]
